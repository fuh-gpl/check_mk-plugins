#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# 
# check_mk plugin to monitor storage systems like Fujitsu ETERNUS DX80 S2 supporting FJDARY-E100.MIB
# Copyright (c) 2012 FuH Entwicklungsgesellschaft mbH, Umkirch, Germany. All rights reserved.
# Author: Philipp Hoefflin, 2012, hoefflin+cmk@fuh-e.de
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation in version 2.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 675 Mass Ave, Cambridge MA 02139, USA or see <http://www.gnu.org/licenses/>
#
# example snmpwalk output:
# snmpwalk -c public -v 1 dx80 .1.3.6.1.4.1.211.1.21.1.100.2.19.2.1.1
# FJDARY-E100::fjdaryDiskStatus.0 = INTEGER: spare(65)
# FJDARY-E100::fjdaryDiskStatus.1 = INTEGER: available(1)
# FJDARY-E100::fjdaryDiskStatus.2 = INTEGER: available(1)
# FJDARY-E100::fjdaryDiskStatus.3 = INTEGER: available(1)
# FJDARY-E100::fjdaryDiskStatus.4 = INTEGER: available(1)
# FJDARY-E100::fjdaryDiskStatus.5 = INTEGER: available(1)
# FJDARY-E100::fjdaryDiskStatus.6 = INTEGER: available(1)
# FJDARY-E100::fjdaryDiskStatus.7 = INTEGER: available(1)
# FJDARY-E100::fjdaryDiskStatus.8 = INTEGER: notavailable(3)
# FJDARY-E100::fjdaryDiskStatus.9 = INTEGER: notavailable(3)
# FJDARY-E100::fjdaryDiskStatus.10 = INTEGER: notavailable(3)
# FJDARY-E100::fjdaryDiskStatus.11 = INTEGER: notavailable(3)
# FJDARY-E100::fjdaryDiskStatus.12 = INTEGER: notavailable(3)
# snmpwalk -c public -v 1 dx80 .1.3.6.1.4.1.211.1.21.1.100.2.19.2.1.3
# FJDARY-E100::fjdaryDiskIndex.0 = INTEGER: 0
# FJDARY-E100::fjdaryDiskIndex.1 = INTEGER: 1
# FJDARY-E100::fjdaryDiskIndex.2 = INTEGER: 2
# FJDARY-E100::fjdaryDiskIndex.3 = INTEGER: 3
# FJDARY-E100::fjdaryDiskIndex.4 = INTEGER: 4
# FJDARY-E100::fjdaryDiskIndex.5 = INTEGER: 5
# FJDARY-E100::fjdaryDiskIndex.6 = INTEGER: 6
# FJDARY-E100::fjdaryDiskIndex.7 = INTEGER: 7
# FJDARY-E100::fjdaryDiskIndex.8 = INTEGER: 8
# FJDARY-E100::fjdaryDiskIndex.9 = INTEGER: 9
# FJDARY-E100::fjdaryDiskIndex.10 = INTEGER: 10
# FJDARY-E100::fjdaryDiskIndex.11 = INTEGER: 11
# FJDARY-E100::fjdaryDiskIndex.12 = INTEGER: 12


# available(1), broken(2), notavailable(3), notsupported(4), present(5),
# readying(6), recovering(7), partbroken(64), spare(65), formatting(66),
# unformatted(67), notexist(68), copying(69)
fjdarye100_disks_status = { 1: 'available', 2: 'broken', 3: 'notavailable',
    4: 'notsupported', 5: 'present', 6: 'readying', 7: 'recovering',
    64: 'partbroken', 65: 'spare', 66: 'formatting', 67: 'unformated',
    68: 'notexist', 69: 'copying' }

# 1. Summary version of check -> all disks into one service
def fjdary60_disks_summary(info):
    # compute the number of disks in each state.
    states = {}
    for index, state in info:
        state = int(state)
        statename = fjdarye100_disks_status[state]
        if state != 3:
            states[statename] = states.get(statename, 0) + 1
    return states

def inventory_fjdarye100_disks_summary(info):
    current_state = fjdary60_disks_summary(info)
    if len(current_state) > 0:
        return [ (None, '', current_state) ]

def fjdarye100_disks_printstates(state):
    return ", ".join(["%s: %s" % (s,c) for (s,c) in state.items()])

def check_fjdarye100_disks_summary(index, expected_status, info):
    current_state = fjdary60_disks_summary(info)
    infotext = " - " + fjdarye100_disks_printstates(current_state)
    if current_state == expected_status:
        return (0, "OK" + infotext)

    result = 1
    for ename, ecount in expected_status.items():
        if current_state.get(ename, 0) < ecount:
            result = 2
            break

    return (result, nagios_state_names[result] + infotext + \
            " (expected was: %s)" % fjdarye100_disks_printstates(expected_status))

check_info['fjdarye100_disks.summary'] = (check_fjdarye100_disks_summary, "Disk summary", 0,  inventory_fjdarye100_disks_summary)
# 1: fjdaryDiskIndex, 3: fjdaryDiskStatus
snmp_info['fjdarye100_disks.summary'] = (".1.3.6.1.4.1.211.1.21.1.100.2.19.2.1", [ 1, 3 ])
snmp_scan_functions['fjdarye100_disks.summary'] \
        = lambda oid: oid(".1.3.6.1.2.1.1.2.0") == ".1.3.6.1.4.1.211.1.21.1.100"

# --------------------------------------------------------------------------------
# 2. Single disk version of check -> one check for each disk

def inventory_fjdarye100_disks(info):
    return [ (int(index), '', repr(fjdarye100_disks_status[int(status)])) for index, status in info if int(status) != 3 ]

def check_fjdarye100_disks(index, expected_status, info):
    for line in info:
        if int(line[0]) == index:
            status = fjdarye100_disks_status[int(line[1])]

            if status == expected_status:
                return (0, "OK - Status is %s" % status)
            else:
                return (2, "CRIT - Status is %s (expected status is %s)" % (status, expected_status))

    return (3, "UNKNOWN - No status for disk number %d present" % index)

check_info['fjdarye100_disks'] = (check_fjdarye100_disks, "Disk %s", 0,  inventory_fjdarye100_disks)
# 1: fjdaryDiskIndex, 3: fjdaryDiskStatus
snmp_info['fjdarye100_disks'] = (".1.3.6.1.4.1.211.1.21.1.100.2.19.2.1", [ 1, 3 ])

snmp_scan_functions['fjdarye100_disks'] \
        = lambda oid: oid(".1.3.6.1.2.1.1.2.0") == ".1.3.6.1.4.1.211.1.21.1.100"
